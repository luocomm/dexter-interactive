{"version":3,"sources":["webpack://dexterInteractive/webpack/universalModuleDefinition","webpack://dexterInteractive/webpack/bootstrap","webpack://dexterInteractive/./node_modules/lodash/isFunction.js","webpack://dexterInteractive/./node_modules/lodash/isObject.js","webpack://dexterInteractive/./node_modules/lodash/isArray.js","webpack://dexterInteractive/./node_modules/lodash/get.js","webpack://dexterInteractive/./node_modules/lodash/_baseGetTag.js","webpack://dexterInteractive/./node_modules/lodash/isString.js","webpack://dexterInteractive/./src/index.js","webpack://dexterInteractive/./node_modules/lodash/_baseGet.js","webpack://dexterInteractive/./node_modules/lodash/_castPath.js","webpack://dexterInteractive/./node_modules/lodash/_isKey.js","webpack://dexterInteractive/./node_modules/lodash/isSymbol.js","webpack://dexterInteractive/./node_modules/lodash/_stringToPath.js","webpack://dexterInteractive/./node_modules/lodash/_memoizeCapped.js","webpack://dexterInteractive/./node_modules/lodash/toString.js","webpack://dexterInteractive/./node_modules/lodash/_toKey.js","webpack://dexterInteractive/./node_modules/lodash/isObjectLike.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","baseGetTag","isObject","tag","type","isArray","Array","baseGet","path","defaultValue","result","undefined","nativeObjectToString","toString","isObjectLike","LOG_LEVEL_INFO","LOG_LEVEL_DEBUG","LOG_LEVEL_WARN","LOG_LEVEL_ERROR","PAYLOAD_TYPE_BOT","PAYLOAD_TYPE_USER","DexterInteractiveEvents","cfg","Error","isFunction","handler","this","assign","handleBotEvents","handleUserEvents","handleWhenClosed","logger","dexterSettings","map","index","text","meta","emitWarn","String","RegExp","metaPath","onMatch","embedIsOpen","emitDebug","level","msg","metadata","emitLogDefault","console","log","info","warn","error","emitLog","payload","extractPayloadType","handleEventWithFunction","handleEventWithRules","extractPayloadText","extractPayloadMetadata","matcher","checkEventAgainstMessageTest","test","message","checkEventAgainstMetadataTest","isString","indexOf","firstMatch","find","checkEventAgainstMatcher","emitInfo","found","innerWidth","createInteractiveBot","botSettings","eventHandler","dexterScriptTag","botId","onOpen","onEmbedOpen","onClose","onEmbedClose","onMessage","handleEvent","document","createElement","src","url","getElementsByTagName","appendChild","castPath","toKey","length","isKey","stringToPath","isSymbol","reIsDeepProp","reIsPlainProp","memoizeCapped","rePropName","reEscapeChar","string","charCodeAt","push","replace","match","number","quote","subString"],"mappings":"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","file":"dexter-interactive.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"dexterInteractive\"] = factory();\n\telse\n\t\troot[\"dexterInteractive\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","var baseGetTag = require('./_baseGetTag'),\n    isObject = require('./isObject');\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nmodule.exports = isFunction;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","var baseGet = require('./_baseGet');\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nmodule.exports = get;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","var baseGetTag = require('./_baseGetTag'),\n    isArray = require('./isArray'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n}\n\nmodule.exports = isString;\n","import get from 'lodash/get';\nimport isObject from 'lodash/isObject';\nimport isFunction from 'lodash/isFunction';\nimport isString from 'lodash/isString';\n/**\n * Configurable properties of a DexterInteractiveEvents instance\n * @typedef DexterInteractiveEventsConfig\n * @property {bool} [handleBotEvents=true] If true, outgoing user messages that meet other criteria will be handled\n * @property {bool} [handleUserEvents=true] If true, incoming bot messages that meet other criteria will be handled\n * @property {bool} [handleWhenClosed=false] If true, messages that take place when the bot is closed will be handled\n * @property {Function|boolean} [logger=false] A function that receives logging messages from this utility:\n *                              fn(LOG_LEVEL, msg, metadata={}) or a bool (true=console.*, false=no logging)\n * @property {Object} [dexterSettings={}] Settings used to initialize the bot\n * @property {Function|Array<DexterInteractiveEventMatcher>} handler Mechanism for handling matched events, either\n *                                                           a custom function that handles every incoming event, or\n *                                                           an array of DexterInteractiveEventMatcher rules and\n *                                                           functions that selectively handle specific events.\n */\n\n/**\n * Rules for matching incoming events to specific handlers.\n * Note that you can test message text (message),  metadata values, (metaPath & meta), or both.\n * @typedef DexterInteractiveEventMatcher\n * @property {string} [type] (Optional) One off the PAYLOAD_TYPE constants to match\n * @property {string|RegExp|Function} [text] (Optional) A check to see if this handler should be used based on\n *                                    message text.  Can be either a string (tested via message.indexOf(handler.text))\n *                                    or regex (tested via handler.text.test(message))\n *                                    or function (tested via handler.text(message) === true\n * @property (string} [metaPath] (Optional) A key to look for in the metadata (see https://lodash.com/docs/4.17.15#get)\n * @property {RegExp|Function|mixed} [meta] (Optional) A check to see if this handler should be used based on\n *                                    metadata value extracted via metaPath.  Can be either\n *                                    a regex (tested via handler.meta.test(value))\n *                                    or function (tested via handler.meta(value) === true\n *                                    or something else  (tested via value === test)\n * @property {Function} onMatch Called when test results in true.\n */\n\nexport const\n  /**\n   * High-value non-failure information\n   */\n  LOG_LEVEL_INFO = 'info'\n  /**\n   * Low-value non-failure information\n   */\n  , LOG_LEVEL_DEBUG = 'debug'\n  /**\n   * Minor concerns: missing/malformatted configs, unknown events, etc.\n   */\n  , LOG_LEVEL_WARN = 'warn'\n  /**\n   * Critical failures that disrupt normal behavior\n   */\n  , LOG_LEVEL_ERROR = 'error'\n  /**\n   * Matches when the payload is for an incoming bot message\n   */\n  , PAYLOAD_TYPE_BOT = 'BOT'\n  /**\n   * Matches when the payload is for an outgoing user message\n   */\n  , PAYLOAD_TYPE_USER = 'USER'\n;\n\n\n/**\n * Structure responses to incoming and outgoing Dexter messages\n */\nexport class DexterInteractiveEvents {\n  /**\n   * Initialize an event handler\n   *\n   * @param {DexterInteractiveEventsConfig} cfg - How we want this handler to behave\n   */\n  constructor(cfg) {\n    // Do some critical config validation\n    if (!isObject(cfg)) {\n      throw new Error('DexterInteractiveEvents is missing a config object');\n    }\n    if (!(isFunction(cfg.handler) || cfg.handler instanceof Array)) {\n      throw new Error('DexterInteractiveEvents config requires a handler function or a list of rules');\n    }\n    // We're at least functional now, so capture the config so we can use the logger next.\n    this.cfg = Object.assign({}, {\n      handleBotEvents: true\n      , handleUserEvents: true\n      , handleWhenClosed: false\n      , logger: false\n      , dexterSettings: {}\n      , handler: []\n    }, cfg);\n    // Do some basic handler validation to help users identify problems ASAP\n    if (cfg.handler instanceof Array) {\n      cfg.handler.map((handler, index) => {\n        // Make sure we have at least one test type\n        if (!handler.text && !handler.meta) {\n          this.emitWarn('Missing a test in handler', {index, handler});\n        }\n        // If we have a message handler, make sure we understand the type\n        if (handler.text && !handler.text instanceof String\n          && !handler.text instanceof RegExp\n          && !isFunction(handler.text)\n        ) {\n          this.emitWarn('Invalid message test in handler', {index, handler});\n        }\n        // If we have a metadata handler, make sure we also have a path\n        if (handler.meta && !handler.metaPath) {\n          this.emitWarn('Missing metaPath for meta test in handler', {index, handler});\n        }\n        // Note that we don't care about meta type since anything that's not a RegExp or a Function\n        // will just trigger an equality test.\n\n        // Finally, make sure our match function is callable\n        if (!isFunction(handler.onMatch)) {\n          this.emitWarn('Invalid onMatch method in handler', {index, handler});\n        }\n      });\n    }\n    // Set up some internal state trackers\n    this.embedIsOpen = false;\n    this.emitDebug('DexterInteractiveEvents initialized', cfg);\n  }\n\n  /**\n   * Emit a log message to our configured handler (either a function or this.emitLogDefault).\n   *\n   * @param {string} level - One of the LOG_LEVEL_* levels\n   * @param {string} msg - Text summary of the event\n   * @param {Objet} [metadata] - Computer-friendly metadata for the event\n   */\n  emitLog(level, msg, metadata={}) {\n    if (this.cfg.logger === true) this.emitLogDefault(level, msg, metadata);\n    else if (this.cfg.logger !== false) this.cfg.logger(level, msg, metadata);\n  }\n\n  /**\n   * Emit a log event via console command.\n   *\n   * @param {string} level - One of the LOG_LEVEL_* levels\n   * @param {string} msg - Text summary of the event\n   * @param {Objet} [metadata] - Computer-friendly metadata for the event\n   */\n  emitLogDefault(level, msg, metadata={}) {\n    switch (level) {\n      case LOG_LEVEL_DEBUG:\n        console.log(msg, metadata);\n        break;\n      case LOG_LEVEL_INFO:\n        console.info(msg, metadata);\n        break;\n      case LOG_LEVEL_WARN:\n        console.warn(msg, metadata);\n        break;\n      case LOG_LEVEL_ERROR:\n        console.error(msg, metadata);\n        break;\n      default:\n        console.error('Unknown event level \"' + level + '\"', msg, metadata);\n    }\n  }\n\n  /**\n   * Emit a debug log event.\n   *\n   * @param {string} msg - Text summary of the event\n   * @param {Objet} [metadata] - Computer-friendly metadata for the event\n   */\n  emitDebug(msg, metadata={}) {\n    this.emitLog(LOG_LEVEL_DEBUG, msg, metadata);\n  }\n\n  /**\n   * Emit an info log event.\n   *\n   * @param {string} msg - Text summary of the event\n   * @param {Objet} [metadata] - Computer-friendly metadata for the event\n   */\n  emitInfo(msg, metadata={}) {\n    this.emitLog(LOG_LEVEL_INFO, msg, metadata);\n  }\n\n  /**\n   * Emit a warn log event.\n   *\n   * @param {string} msg - Text summary of the event\n   * @param {Objet} [metadata] - Computer-friendly metadata for the event\n   */\n  emitWarn(msg, metadata={}) {\n    this.emitLog(LOG_LEVEL_WARN, msg, metadata);\n  }\n  /**\n   * Emit an error log event.\n   *\n   * @param {string} msg - Text summary of the event\n   * @param {Objet} [metadata] - Computer-friendly metadata for the event\n   */\n  emitError(msg, metadata={}) {\n    this.emitLog(LOG_LEVEL_ERROR, msg, metadata);\n  }\n\n  /**\n   * Our event handler proxy - routes the event to this.cfg.handler appropriately.\n   *\n   * @param {Object} payload - The full Dexter embed event payload\n   */\n  handleEvent(payload) {\n    const type = this.extractPayloadType(payload);\n    // Make sure we want to handle this event\n    if (!this.embedIsOpen && !this.cfg.handleWhenClosed) {\n      this.emitDebug('Ignoring event, embed closed', payload);\n      return;\n    }\n    if (type === PAYLOAD_TYPE_USER && !this.cfg.handleUserEvents) {\n      this.emitDebug('Ignoring outgoing user message event', payload);\n      return;\n    }\n    if (type === PAYLOAD_TYPE_BOT && !this.cfg.handleBotEvents) {\n      this.emitDebug('Ignoring incoming bot message event', payload);\n      return;\n    }\n    // If we do, send it to the correct handler\n    if (isFunction(this.cfg.handler)) {\n      this.handleEventWithFunction(payload);\n    } else if (this.cfg.handler instanceof Array) {\n      this.handleEventWithRules(payload);\n    } else {\n      this.emitWarn('Invalid event handler configured, not responding', {handler: this.handler});\n    }\n  }\n\n  /**\n   * Send the payload to a handler function with important details teased out.\n   *\n   * @param {Object} payload - Dexter embed payload\n   */\n  handleEventWithFunction(payload) {\n    this.cfg.handler(\n        this.extractPayloadType(payload)\n        , this.extractPayloadText(payload)\n        , this.extractPayloadMetadata(payload)\n        , payload\n    );\n  }\n\n  /**\n   * Check a payload against a single matcher.\n   *\n   * @param {Object} payload - Dexter embed payload\n   * @param {DexterInteractiveEventMatcher} matcher - Matcher to test against\n   * @param {string} text - Text extracted from the payload\n   * @param {Object} metadata - Metadata extracted frfofm the payload\n   * @return {bool} True if there's a match\n   */\n  checkEventAgainstMatcher(payload, matcher, text, metadata) {\n    // Optional: if we're matching a particular type, check it first.\n    if (matcher.type && matcher.type !== type) {\n      this.emitDebug('Skipping matcher due to type mismatch', {payload, matcher});\n      return false;\n    }\n    // If we have a message test, run that first\n    if (matcher.text) {\n      if (this.checkEventAgainstMessageTest(matcher.text, text)) {\n        this.emitDebug('Matcher passed message test', {payload, matcher, test: matcher.message, message: text});\n      } else {\n        return false;\n      }\n    }\n    // Then, if we have a metadata test and we've passed our message text, run it.\n    if (matcher.meta) {\n      if (this.checkEventAgainstMetadataTest(matcher.meta, matcher.metaPath, metadata)) {\n        this.emitDebug('Matcher passed metadata test',\n            {payload, matcher, test: matcher.meta, path: matcher.metaPath, metadata});\n      } else {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * See if a message test passes\n   *\n   * @param {string|RegExp|Function} test - Test to run\n   * @param {string} message - Message text to test\n   * @return {bool} True if the test passes\n   */\n  checkEventAgainstMessageTest(test, message) {\n    if (test instanceof RegExp) {\n      // If we have a RegExp test, see if the string passes\n      if (test.test(message)) {\n        return true;\n      } else {\n        this.emitDebug('Skipping matcher due to message RegExp test mismatch'\n            , {test, message});\n        return false;\n      }\n    } else if (isString(test)) {\n      // If we have a plain message test, see if it exists in the message\n      if (message.indexOf(test) >= 0) {\n        return true;\n      } else {\n        this.emitDebug('Skipping matcher due to message text test mismatch'\n            , {test, message});\n        return false;\n      }\n    } else if (isFunction(test)) {\n      // If we have a function message test, see if it fails\n      if (test(message)) {\n        return true;\n      } else {\n        this.emitDebug('Skipping matcher due to message function test mismatch'\n            , {test, message});\n        return false;\n      }\n    } else {\n      this.emitWarn('Skipping matcher due to unknown test type'\n          , {test, message});\n      return false;\n    }\n  }\n\n  /**\n   * See if a metadata test passes\n   *\n   * @param {string|RegExp|Function} test - Test to run\n   * @param {string|Array} path - Path to the proper metadata value\n   * @param {Array} metadata - Metadata from the event\n   * @return {bool} True if the test passes\n   */\n  checkEventAgainstMetadataTest(test, path, metadata) {\n    const value = get(metadata, path);\n    if (test instanceof RegExp) {\n      // If we have a text RegExp, make sure the value is a string\n      if (typeof value !== 'string') {\n        this.emitDebug('Skipping matcher due to a non-string value in a RegExp test');\n        return false;\n      }\n      // ...then see if the string passes\n      if (test.test(value)) {\n        return true;\n      } else {\n        this.emitDebug('Skipping matcher due to metadata RegExp test mismatch'\n            , {test, path, value});\n        return false;\n      }\n    } else if (isFunction(test)) {\n      if (test(value)) {\n        return true;\n      } else {\n        // If we have a function message test, see if it fails\n        this.emitDebug('Skipping matcher due to metadata function test mismatch'\n            , {test, path, value});\n        return false;\n      }\n    } else if (test === value) {\n      // If we have anything else, check for equality.\n      return true;\n    } else {\n      this.emitDebug('Skipping matcher due to metadata value test mismatch'\n          , {test, path, value});\n      return false;\n    }\n  }\n\n  /**\n   * Check the configured rules to find a match for a payload and execute the discovered handler.\n   *\n   * @param {Object} payload - Dexter embed payload\n   */\n  handleEventWithRules(payload) {\n    const type = this.extractPayloadType(payload)\n      , text = this.extractPayloadText(payload) || ''\n      , metadata = this.extractPayloadMetadata(payload)\n      , firstMatch = this.cfg.handler.find((matcher) => this.checkEventAgainstMatcher(payload, matcher, text, metadata))\n    ;\n    if (firstMatch) {\n      firstMatch.onMatch(type, text, metadata, payload);\n    } else {\n      this.emitInfo('Failed to find a match', {type, text, metadata, payload});\n    }\n  }\n  /**\n   * Pull the payload type (a PAYLOAD_TYPE constant) from the payload.\n   *\n   * @param {Object} payload - Dexter embed payload\n   * @return {string} A PAYLOAD_TYPE constant\n   */\n  extractPayloadType(payload) {\n    return payload.type;\n  }\n\n  /**\n   * Pull the payload text from the payload.\n   *\n   * @param {Object} payload - Dexter embed payload\n   * @return {string} Message text\n   */\n  extractPayloadText(payload) {\n    return payload.text;\n  }\n\n  /**\n   * Pull ALL the metadata from the payload.\n   *\n   * @param {Object} payload - Dexter embed payload\n   * @return {Array<Object>} Zero or more metadata objects from ^metadata shortcodes\n   */\n  extractPayloadMetadata(payload) {\n    let found = get(payload, 'attachments.metadata');\n    found = found instanceof Array\n      ? found.map((o) => o.metadata)\n      : []\n    ;\n\n    return found;\n  }\n\n  /**\n   * Internal handler for the embed tool that tracks its open state.\n   */\n  onEmbedOpen() {\n    this.embedIsOpen = true;\n  }\n\n  /**\n   * Internal handler for the embed tool that tracks its open state.\n   */\n  onEmbedClose() {\n    this.embedIsOpen = false;\n  }\n\n  /**\n   * Check to see if the embed is fullscreened (usually in phone-sized browser windows)\n   *\n   * @return {bool} True if the bot is currently fullscreened\n   */\n  isEmbedFullscreen() {\n    // This will eventually be updated with reporting directly from the embed - copy this logic\n    // elsewhere at your own risk.\n    return window.innerWidth < 600;\n  }\n}\n\n/**\n * Perform all the necessary wireup for an interactive bot.\n *\n * @param {DexterInteractiveEventsConfig} cfg - Configuration for the interactive bot\n * @return {DexterInteractiveEvents} Configured Dexter interactive bot instance\n */\nexport function createInteractiveBot(cfg) {\n  const botSettings = {};\n  let eventHandler = null\n    , dexterScriptTag = null\n  ;\n  // Make sure we have a config object\n  if (!isObject(cfg)) {\n    throw new Error('createInteractiveBot is missing a config object');\n    return;\n  }\n  // Make sure we have the dexterSettings we need\n  if (!isObject(cfg.dexterSettings)) {\n    throw new Error('dexterSettings configuration property is required');\n  }\n  if (!cfg.dexterSettings.botId) {\n    throw new Error('Missing dexterSettings.botId in your config');\n  }\n  // Build a config for the embed script\n  Object.assign(botSettings, cfg.dexterSettings);\n  eventHandler = new DexterInteractiveEvents(cfg);\n  // Honor any existing event handlers as well as our new event system\n  botSettings.onOpen = () => {\n    eventHandler.onEmbedOpen();\n    isFunction(cfg.dexterSettings.onOpen) && cfg.dexterSettings.onOpen();\n  };\n  botSettings.onClose = () => {\n    eventHandler.onEmbedClose();\n    isFunction(cfg.dexterSettings.onClose) && cfg.dexterSettings.onClose();\n  };\n  botSettings.onMessage = (payload) => {\n    eventHandler.handleEvent(payload);\n    isFunction(cfg.dexterSettings.onMessage) && cfg.dexterSettings.onMessage(payload);\n  };\n  // Load up and run our bot with our newly bound config\n  window.dexterSettings = botSettings;\n  dexterScriptTag = document.createElement('script');\n  dexterScriptTag.type = 'text/javascript';\n  dexterScriptTag.src = dexterSettings.url || 'https://rundexter.com/webwidget';\n  document.getElementsByTagName('head')[0].appendChild(dexterScriptTag);\n  return eventHandler;\n}\n","var castPath = require('./_castPath'),\n    toKey = require('./_toKey');\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = castPath(path, object);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\nmodule.exports = baseGet;\n","var isArray = require('./isArray'),\n    isKey = require('./_isKey'),\n    stringToPath = require('./_stringToPath'),\n    toString = require('./toString');\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\nmodule.exports = castPath;\n","var isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/;\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\nmodule.exports = isKey;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","var memoizeCapped = require('./_memoizeCapped');\n\n/** Used to match property names within property paths. */\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\nmodule.exports = stringToPath;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n"],"sourceRoot":""}